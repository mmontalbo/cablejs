{"name":"Cable.js","tagline":"A different kind of FRP library","body":"# cable.js\r\n\r\nAn effect system and FRP runtime for JavaScript\r\n\r\n![](https://raw.githubusercontent.com/whatgoodisaroad/cablejs/master/assets/cablejs-400x192.png)\r\n\r\n## What is cable.js?\r\n\r\ncable.js is an Functional Reactive Programming (FRP) runtime, an event system,\r\nand module loader all unified under a common syntax.\r\n\r\nEvery piece of code depends on something, whether it's data, an event being \r\ntriggered or a library. cable.js is a way of making these dependencies explicit \r\nand structuring your code around them. The result is a cleaner code structure \r\nthat can easily handle constantly changing information and interaction.\r\n\r\n## Example\r\n\r\nA simple example would be a markdown previewer. We'd like a page where one can \r\nwrite markdown code and have a live-updating preview of the resulting HTML. So,\r\nwe write some elements for the input and the output:\r\n\r\n    <textarea id=\"input\"></textarea>\r\n    <div id=\"output\"></div>\r\n\r\nWhat remains is to use cable.js to connect the input to the output via a\r\nmarkdown compiler.\r\n\r\n    Cable.define({\r\n      $:Cable.library(\"jquery.min.js\"),\r\n      marked:Cable.library(\"marked.js\"),\r\n\r\n      source:Cable.textbox(\"#input\"),\r\n      dest:function($, marked, source) {\r\n        $(\"#output\").html(marked(source()));\r\n      }\r\n    });\r\n\r\nThat's it! This is all the code needed to have a live updating preview. It's \r\nvanilla JavaScript running in strict mode: no fake pseudo-JS syntax that needs \r\nto be pre-processed. No magic markup tags.\r\n\r\nA working example of this previewer can be found in `examples/markdown.htm` in \r\nthe repository. Consult the *Building* section of the readme for help running \r\nthe example.\r\n\r\nCable can do much more. There are a number of different kinds of nodes which can\r\nbe added to the graph, including different kinds of events, data-sources, \r\nsynthetic-data-sources, effects, libraries and cable-modules. Consult the \r\nexamples and API document for more. A tutorial is coming soon.\r\n\r\n## API\r\n\r\nThe API is documented [in the wiki](https://github.com/whatgoodisaroad/cablejs/wiki/API-Documentation).\r\n\r\n## Building\r\n\r\nTo download and build, you'll need npm and git.\r\n\r\n    # download:\r\n\r\n    git clone git@github.com:whatgoodisaroad/cablejs.git\r\n    cd cablejs\r\n\r\n    # install dependencies and build:\r\n\r\n    npm install\r\n    grunt build\r\n\r\n    # download example dependencies:\r\n\r\n    cd examples\r\n    bower install\r\n\r\n## Roadmap\r\n\r\n* ☑ Functioning core system.\r\n* ☑ Builds and runs in strict mode.\r\n* ☑ Functioning examples.\r\n* ☑ Functioning cyclic dependency graphs.\r\n* ☑ Module loader is AMD compliant.\r\n* ☑ Write API docs.\r\n* ☑ Streamline event definition syntax.\r\n* ☑ Enable subdefinition syntax for library-dependnat nodes\r\n* ☑ Alias support.\r\n* ☑ Write unit tests.\r\n* ☐ Write *more* unit tests.\r\n* ☐ Write tutorial.\r\n* ☐ Implement tools for debugging the dependency graph (via `Cable._debug()`).\r\n* ☐ Make the dependency graph more plastic (i.e. reconfigurable).\r\n* ☐ Add history sensitivity decorations.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}