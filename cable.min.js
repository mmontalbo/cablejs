/* cablejs: By Wyatt Allen, MIT Licenced */
var Cable={};
(function(){var reserved="result respond define type event".split(" ");var graph={};function each(obj,fn){for(var key in obj)if(obj.hasOwnProperty(key))fn(obj[key],key)}function getArgNames(fn){if(fn.argAliases)return fn.argAliases;else return(fn+"").match(/^function(\s+\S*)?\(([^)]+)\)/)[2].split(",").map(function(x){return x.replace(/(^\s+)|(\s+$)/g,"")})}function getFanIn(fn,context){return getArgNames(fn).filter(function(arg){return reserved.indexOf(arg)==-1}).map(function(arg){return arg.replace(/^_/,"")})}
function getDependencies(fn,context){return getArgNames(fn).filter(function(arg){return reserved.indexOf(arg)==-1&&arg[0]!="_"})}function isFunction(fn){var getType={};return fn&&getType.toString.call(fn)==="[object Function]"}function isSynthetic(fn){return getArgNames(fn).indexOf("result")!=-1||getArgNames(fn).indexOf("respond")!=-1}function extend(defaults,override){if(override){var o={};each(defaults,function(prop,name){o[name]=override.hasOwnProperty(name)?override[name]:prop});return o}else return defaults}
Cable.define=function(object,options){var options=extend({reify:true,wireup:true,scope:{chain:[]}},options);each(object,function(cable,name){if(/^_/.test(name))throw"Illegal definition: names cannot begin with an underscore.";if(reserved.indexOf(name)!=-1)throw"Illegal definition: "+name+" is a reserved word.";if(graph.hasOwnProperty(name))throw"Illegal definition: "+name+" is already defined.";var type=null;if(cable.hasOwnProperty("type"))type=cable.type;else if(isFunction(cable))type=isSynthetic(cable)?
"synthetic":"effect";else type="sub";if(install.hasOwnProperty(type))install[type](name,cable,options.scope);else if(type!=="sub"&&type!=="reference")throw"Illegal definiton: could not determine meaning of "+name;});if(options.reify)reify();if(options.wireup)wireup()};var install={data:function(name,obj,scope){graph[name]={type:"data",value:obj.value,"in":[],out:[],helpers:obj.helpers?obj.helpers:{},scope:scope}},synthetic:function(name,fn,scope){if(getArgNames(fn).indexOf("respond")!=-1)graph[name]=
{type:"synthetic",fn:fn,value:null,invoked:false,"in":getFanIn(fn,fn.context),out:[],resultIndex:getArgNames(fn).indexOf("respond"),scope:scope,coalesce:false};else graph[name]={type:"synthetic",fn:fn,value:null,invoked:false,"in":getFanIn(fn,fn.context),out:[],resultIndex:getArgNames(fn).indexOf("result"),scope:scope,coalesce:true}},effect:function(name,fn,scope){graph[name]={type:"effect",fn:fn,"in":getFanIn(fn,fn.context),out:[],scope:scope}},event:function(name,obj,scope){graph[name]={type:"event",
value:obj.defaultValue,wireup:obj.wireup,isWiredUp:false,invoked:false,"in":[],out:[],scope:scope}},library:function(name,obj,scope){graph[name]={type:"library",path:obj.path,shim:obj.shim,handle:null,loaded:false,scope:scope}},sub:function(name,obj,scope){var newObj={};var references={};each(obj,function(subobj,subname){if(subobj.type==="reference")references[subname]=subobj.referenceName});each(obj,function(subobj,subname){var newName=subname==="main"?name:name+"_"+subname;newObj[newName]=subobj});
Cable.define(newObj,{reify:false,wireup:false,scope:{chain:scope.chain.concat([name])}})}};function enumerateScopes(chain,name){var suffix=name==="main"?"":"_"+name,scopes=[];for(var idx=0;idx<chain.length;++idx)scopes.push(chain.slice(0,chain.length-idx).join("_")+suffix);scopes.push(name);return scopes}function resolve(name,scope){var names=enumerateScopes(scope.chain,name);for(var idx=0;idx<names.length;++idx)if(graph.hasOwnProperty(names[idx]))return names[idx];return null}function reify(){each(graph,
function(node){node.out=[]});each(graph,function(node,nodeName){if(node.fn)getDependencies(node.fn,node.context).forEach(function(depName){var qname=resolve(depName,node.scope);if(qname)graph[qname].out.push(nodeName);else{function showContext(context){var refs=[];each(context.references,function(ref,name){refs.push("'"+name+"' ==> '"+ref+"'")});return"named '"+context.name+"'"+" and references {"+refs.join(", ")+"}"}throw"Reference to undefined node '"+depName+"' as dependency of '"+nodeName+"'"+
(node.hasOwnProperty("context")?" in context "+showContext(node.context):"");}})})}function wireup(){each(graph,function(node,nodeName){if(node.type==="event"&&!node.isWiredUp){node.wireup(function(value){yield(nodeName,function(setter){setter(value)})});node.isWiredUp=true}})}var yields={data:function(name,fn){var access=function(){if(!arguments.length)return graph[name].value;else if(arguments[0]!=graph[name].value){graph[name].value=arguments[0];triggerDownstream(name)}};each(graph[name].helpers,
function(helper,helpName){access[helpName]=function(){return helper.apply(access,arguments)}});fn(access)},synthetic:function(name,fn){fn(function(){return graph[name].value})},effect:function(){},event:function(name,fn){fn(function(){if(!arguments.length)return graph[name].value;else if(arguments[0]!=graph[name].value||!graph[name].coalesce){graph[name].invoked=true;graph[name].value=arguments[0];triggerDownstream(name)}})},library:function(name,fn){if(graph[name].loaded)fn(graph[name].handle);else evaluate(name,
function(){yield(name,fn)})}};function yield(name,fn){if(graph.hasOwnProperty(name))yields[graph[name].type](name,fn);else throw"Cannot yield: '"+name+"' is not defined";}Cable.yield=yield;function yieldAll(names,fn,prefix){if(prefix===undefined)prefix=[];if(!names.length)fn(prefix);else yield(names[0],function(value){yieldAll(names.slice(1),fn,prefix.concat([value]))})}function yieldIn(name,fn){var resolved=graph[name]["in"].map(function(dep){return resolve(dep,graph[name].scope)});yieldAll(resolved,
fn)}function evaluate(name,fn){evaluators[graph[name].type](name,fn)}var evaluators={data:yield.data,event:yield.event,synthetic:function(name,fn){yieldIn(name,function(deps){deps.splice(graph[name].resultIndex,0,function(result){if(graph[name].value!=result||!graph[name].coalesce){graph[name].value=result;graph[name].invoked=true;triggerDownstream(name)}fn()});graph[name].fn.apply({},deps)})},effect:function(name,fn){yieldIn(name,function(deps){graph[name].fn.apply({},deps);fn()})},library:function(name,
fn){if(graph[name].loaded){fn();return}var define=function(){var idx=arguments.length-1;if(isFunction(arguments[idx]))graph[name].handle=arguments[idx]();else graph[name].handle=arguments[idx];graph[name].loaded=true};define.amd={};var req=new XMLHttpRequest;req.onreadystatechange=function(){if(this.readyState===4&&this.status===200){var source=this.responseText;if(graph[name].shim)source=["define(function() {",source,"\nreturn ",graph[name].shim,"; });"].join("");window.define=define;eval(source);
delete window.define;if(name==="$"&&($&&$.noConflict))$.noConflict();fn()}};req.open("get",graph[name].path,true);req.send()}};function trigger(name){if(!allDependenciesEvaluated(name))return;evaluate(name,function(){})}function allDependenciesEvaluated(name){var deps=graph[name]["in"].map(function(dep){return resolve(dep,graph[name].scope)});for(var idx=0;idx<deps.length;++idx)if(graph[deps[idx]].type==="event"&&!graph[deps[idx]].invoked)return false;return true}function triggerDownstream(name){graph[name].out.forEach(trigger)}
Cable._debug=function(){return graph}})();Cable.data=function(value,helpers){var obj={type:"data",value:value};if(helpers)obj.helpers=helpers;return obj};
Cable.event=function(selector,events,property,triggerOnLoad){return{type:"event",coalesce:false,wireup:function(fn){Cable.yield("$",function($){if(selector==="document"&&events==="ready")$(document).ready(fn);else{var getter=function(){var val=null,obj=$(selector);if(!property)property="time";if(property==="value"){val=obj.val();if(obj.is("[type='number']"))val=parseFloat(val)}else if(property==="time")val=new Date;else if(/^data-[-_a-zA-Z0-9]+/.test(property))val=obj.attr(property);fn(val)},handler;
if(events==="key-return"){events="keyup";handler=function(evt){if(evt.keyCode===13)getter()}}else handler=getter;$(document).on(events,selector,handler);if(triggerOnLoad)getter()}})}}};Cable.textbox=function(selector){return Cable.event(selector,"change keyup","value",true)};Cable.returnKey=function(selector){return{type:"event",wireup:function(fn){Cable.yield("$",function($){$(selector).on("keyup",function(evt){if(evt.keyCode===13)fn(new Date)})})}}};
Cable.define({init:{type:"event",wireup:function(f){f(new Date)}}},{reify:false,wireup:false});
Cable.list=function(array){return{array:Cable.data(array),main:Cable.data({index:0,howMany:0,replacement:array},{splice:function(i,h,r){this({index:i,howMany:h,replacement:r})},prepend:function(e){this({index:0,howMany:0,replacement:[e]})},append:function(e){this({index:-1,howMany:0,replacement:[e]})},updateAt:function(index,replacement){this({index:index,howMany:1,replacement:[replacement]})}}),updater:function(main,_array){var s=main(),a=_array().slice(0);if(s.index>=0)a.splice(s.index,s.howMany,
s.replacement);else a.splice(a.length-s.index,s.howMany,s.replacement);_array(a)}}};Cable.interval=function(period){if(period.substring)return{ref:Cable.reference(period),pid:Cable.data(-1),main:function(ref,_pid,result){clearInterval(_pid());var newPid=setInterval(function(){result(new Date)},ref());_pid(newPid)}};else return{type:"event",defaultValue:new Date,wireup:function(fn){setInterval(function(){fn(new Date)},period)}}};Cable.reference=function(name){return{type:"reference",referenceName:name}};
Cable.library=function(path,shim){return{type:"library",path:path,shim:shim}};
Cable.template=function(selector,template){var reg=/\{\{[_a-zA-Z0-9]+\}\}/g,match=template.match(reg)||[],deps=match.map(function(m){return m.replace(/\{|\}/g,"")});var obj={properties:Cable.pack(deps),main:function(properties,$){function disp(v){if(typeof v==="number")return v.toFixed(2);else return v}var rend=template;for(var idx=0;idx<deps.length;++idx)rend=rend.replace("{{"+deps[idx]+"}}",disp(properties()[deps[idx]]));$(selector).html(rend)}};return obj};
Cable.pack=function(args){var fn=function(result){var obj={};for(var idx=1;idx<fn.argAliases.length;++idx)obj[fn.argAliases[idx]]=arguments[idx]();result(obj)};var aliases=args.slice(0);aliases.splice(0,0,"result");fn.argAliases=aliases;return fn};Cable.counter=function(){return Cable.data(-1,{next:function(){var n=this()+1;this(n);return n}})};
Cable.json=function(fn){return{url:fn,main:function($,url,result){var cdr=/^http/.test(url())&&!/callback=/.test(url());$.ajax({dataType:"json",url:url(),crossDomain:!!cdr,success:function(data){result(data)}})}}};
